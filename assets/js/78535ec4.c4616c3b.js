"use strict";(self.webpackChunkdeveloper_newcoin_org_2=self.webpackChunkdeveloper_newcoin_org_2||[]).push([[3579],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=i.createContext({}),s=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),h=a,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||r;return n?i.createElement(m,l(l({ref:t},u),{},{components:n})):i.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=h;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3555:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var i=n(7462),a=(n(7294),n(3905));const r={},l="Step 2: Implementing Activation Function and Oracle Request Logic",o={unversionedId:"guides/gitcoin-chainlink-guild/implementing-function-oracle",id:"guides/gitcoin-chainlink-guild/implementing-function-oracle",title:"Step 2: Implementing Activation Function and Oracle Request Logic",description:"In this step, we'll outline how to implement the activation function and how to utilize Chainlink Oracles to perform an API request to Guild.xyz. The process includes sending a request, handling the response, and communicating back to the Encoder.",source:"@site/docs/guides/gitcoin-chainlink-guild/implementing-function-oracle.md",sourceDirName:"guides/gitcoin-chainlink-guild",slug:"/guides/gitcoin-chainlink-guild/implementing-function-oracle",permalink:"/docs/guides/gitcoin-chainlink-guild/implementing-function-oracle",draft:!1,editUrl:"https://github.com/newfound8ion/developer/edit/master/docs/guides/gitcoin-chainlink-guild/implementing-function-oracle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Step 1: Stubbing the Contract",permalink:"/docs/guides/gitcoin-chainlink-guild/stubbing-the-contract"},next:{title:"Step 3: Ensuring Secure and Efficient Contract Operation",permalink:"/docs/guides/gitcoin-chainlink-guild/securing-the-contract"}},c={},s=[{value:"A. Implementing the Activation Function",id:"a-implementing-the-activation-function",level:2},{value:"B. Sending API Request using Chainlink",id:"b-sending-api-request-using-chainlink",level:2},{value:"C. Handling the API Response",id:"c-handling-the-api-response",level:2},{value:"Conclusion of Step 2:",id:"conclusion-of-step-2",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"step-2-implementing-activation-function-and-oracle-request-logic"},"Step 2: Implementing Activation Function and Oracle Request Logic"),(0,a.kt)("p",null,"In this step, we'll outline how to implement the activation function and how to utilize Chainlink Oracles to perform an API request to Guild.xyz. The process includes sending a request, handling the response, and communicating back to the Encoder."),(0,a.kt)("h2",{id:"a-implementing-the-activation-function"},"A. Implementing the Activation Function"),(0,a.kt)("p",null,"We implement the activate function, which triggers the API request and stores the callback information."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function activate(uint256 _activationFunctionId) external {\n    // Send the request to the Chainlink Oracle\n    request();\n    // Store the callback address for this requests\n    callback = msg.sender;\n    activationFunctionId = _activationFunctionId;\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"request(): A function that triggers the API call (implementation details below)."),(0,a.kt)("li",{parentName:"ul"},"callback: Storing the address calling the activation function to communicate back once the API response is received."),(0,a.kt)("li",{parentName:"ul"},"activationFunctionId: Storing the ID to communicate back to the callback which activation function\u2019s condition was checked.")),(0,a.kt)("h2",{id:"b-sending-api-request-using-chainlink"},"B. Sending API Request using Chainlink"),(0,a.kt)("p",null,"Now, let's create the request function to initiate an API call to Guild.xyz's API via Chainlink."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"function request() public {\n    Chainlink.Request memory req = buildOperatorRequest(jobId, this.fulfill.selector);\n\n    // Define request parameters\n    string memory addressAsString = string(abi.encodePacked(msg.sender));\n    string memory targetUrl = string(abi.encodePacked('https://api.guild.xyz/v1/guild/access/19282/', addressAsString));\n\n    req.add('method', 'GET');\n    req.add('url', targetUrl);\n    req.add('headers', '[\"content-type\", \"application/json\", \"set-cookie\", \"sid=14A52\"]');\n    req.add('path', '0,access');\n\n    // Send the request to the Chainlink oracle\n    sendOperatorRequest(req, fee);\n}\n")),(0,a.kt)("p",null,"In this function:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"buildOperatorRequest: Chainlink function to construct a request."),(0,a.kt)("li",{parentName:"ul"},"fulfill.selector: Points to the function that handles the API response."),(0,a.kt)("li",{parentName:"ul"},"req.add: Adds parameters to configure the API request. We add the headers, url and get reqeust. We also add the path to get the access boolean for the guild we are after."),(0,a.kt)("li",{parentName:"ul"},"sendOperatorRequest: Chainlink function to send the request to the Oracle.")),(0,a.kt)("h2",{id:"c-handling-the-api-response"},"C. Handling the API Response"),(0,a.kt)("p",null,"We need a function (fulfill) to handle the API response, check the returned data, and communicate back to the Encoder via the callback."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// Event to log the oracle response\nevent RequestFulfilled(bytes32 indexed requestId);\n\nfunction fulfill(bytes32 requestId, bool data) public recordChainlinkFulfillment(requestId) {\n    emit RequestFulfilled(requestId);\n\n    // Ensure the wallet can\'t trigger claiming WATTs for their token multiple times\n    if (data && !passportHolders[msg.sender]) {\n        passportHolders[msg.sender] = true;\n\n        // Ensure the callback address is set before calling the function\n        require(callback != address(0), "Callback address not set");\n        ICallback(callback).oracleResponse(data, activationFunctionId);\n    }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"recordChainlinkFulfillment: A modifier to ensure only the Oracle can call this function."),(0,a.kt)("li",{parentName:"ul"},"emit RequestFulfilled(requestId): Logs the API response."),(0,a.kt)("li",{parentName:"ul"},"passportHolders","[msg.sender]"," = true: Flags the wallet as having satisfied the condition."),(0,a.kt)("li",{parentName:"ul"},"ICallback(callback).oracleResponse(data, activationFunctionId): Calls back to inform whether the condition was satisfied.")),(0,a.kt)("h2",{id:"conclusion-of-step-2"},"Conclusion of Step 2:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We've implemented the activate function that triggers the Chainlink API request and stores callback details."),(0,a.kt)("li",{parentName:"ul"},"We've outlined how to send an API request to Guild.xyz using Chainlink, specifying the API endpoint, method, and necessary headers."),(0,a.kt)("li",{parentName:"ul"},"We've implemented the fulfill function to handle the API response, check the data, and communicate back to the Encoder.")),(0,a.kt)("p",null,"In the next steps, we\u2019ll work on setting up additional configuration options and other functionalities like withdrawing LINK from the contract, updating Chainlink parameters, and ensuring that the contract operates securely and efficiently. This aligns with Newcoin's philosophy of offering a decentralized, secure, and trustworthy mechanism to mint WATTs based on real-world, verifiable conditions."))}p.isMDXComponent=!0}}]);